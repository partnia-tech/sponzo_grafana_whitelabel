# Dockerfile de producción para Sponzo Dashboard (White-label Grafana)
# Este Dockerfile crea una imagen autocontenida lista para producción

ARG GO_IMAGE=golang:1.24.4-alpine
ARG JS_IMAGE=node:22-alpine
ARG FINAL_IMAGE=alpine:3.19

# Build arguments para metadatos
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# =====================================================
# Etapa 1: Construir la aplicación completa
# =====================================================
FROM ${GO_IMAGE} AS builder

WORKDIR /tmp/grafana

# Instalar dependencias del sistema
RUN apk add --no-cache \
    binutils-gold \
    bash \
    gcc g++ make git \
    python3 \
    build-base \
    nodejs \
    npm \
    yarn

# Variables de entorno para construcción
ENV NODE_OPTIONS=--max_old_space_size=8000
ENV NODE_ENV=production

# Copiar todo el código fuente primero (necesario para workspaces de yarn)
COPY . .

# Descargar dependencias de Go
RUN go mod download

# Instalar herramientas de desarrollo
RUN go install github.com/bwplotka/bingo@latest

# Instalar dependencias de Node.js (ahora con todos los workspaces disponibles)
RUN yarn install --immutable

# Generar código con Wire
RUN echo "Generando código con Wire..." && \
    /go/bin/wire gen -tags oss ./pkg/server

# Construir el frontend
RUN echo "Construyendo frontend..." && \
    yarn build

# Construir el backend
RUN echo "Construyendo backend..." && \
    CGO_ENABLED=1 GOOS=linux go build \
    -ldflags="-w -s -extldflags '-static'" \
    -tags netgo,osusergo \
    -o bin/grafana-server \
    ./pkg/cmd/grafana-server

# Construir grafana-cli
RUN echo "Construyendo grafana-cli..." && \
    CGO_ENABLED=1 GOOS=linux go build \
    -ldflags="-w -s -extldflags '-static'" \
    -tags netgo,osusergo \
    -o bin/grafana-cli \
    ./pkg/cmd/grafana-cli

# =====================================================
# Etapa 2: Imagen final de producción
# =====================================================
FROM ${FINAL_IMAGE}

# Instalar dependencias mínimas del sistema
RUN apk add --no-cache \
    ca-certificates \
    bash \
    tzdata \
    musl \
    curl

# Crear usuario y grupo grafana
RUN addgroup -S grafana && \
    adduser -S -G grafana grafana

# Crear directorios y establecer permisos
RUN mkdir -p \
    /var/lib/grafana \
    /var/log/grafana \
    /etc/grafana \
    /etc/grafana/provisioning/dashboards \
    /etc/grafana/provisioning/datasources \
    /etc/grafana/provisioning/plugins \
    /etc/grafana/provisioning/notifiers \
    /etc/grafana/provisioning/alerting \
    /usr/share/grafana && \
    chown -R grafana:grafana \
    /var/lib/grafana \
    /var/log/grafana \
    /etc/grafana \
    /usr/share/grafana

# Copiar binarios desde la etapa de construcción
COPY --from=builder /tmp/grafana/bin/grafana-server /usr/share/grafana/bin/
COPY --from=builder /tmp/grafana/bin/grafana-cli /usr/share/grafana/bin/

# Copiar archivos estáticos y de configuración
COPY --from=builder /tmp/grafana/public /usr/share/grafana/public
COPY --from=builder /tmp/grafana/conf /usr/share/grafana/conf
COPY --from=builder /tmp/grafana/tools /usr/share/grafana/tools

# Copiar archivo de configuración por defecto
COPY --from=builder /tmp/grafana/conf/defaults.ini /etc/grafana/grafana.ini

# Crear enlaces simbólicos para facilitar el uso
RUN ln -s /usr/share/grafana/bin/grafana-server /usr/local/bin/grafana-server && \
    ln -s /usr/share/grafana/bin/grafana-cli /usr/local/bin/grafana-cli

# Variables de entorno
ENV PATH=/usr/share/grafana/bin:$PATH
ENV GF_PATHS_CONFIG=/etc/grafana/grafana.ini
ENV GF_PATHS_DATA=/var/lib/grafana
ENV GF_PATHS_HOME=/usr/share/grafana
ENV GF_PATHS_LOGS=/var/log/grafana
ENV GF_PATHS_PLUGINS=/var/lib/grafana/plugins
ENV GF_PATHS_PROVISIONING=/etc/grafana/provisioning

# Configuraciones específicas de Sponzo
ENV GF_SERVER_ROOT_URL=http://localhost:3001
ENV GF_SECURITY_ADMIN_USER=admin
ENV GF_USERS_ALLOW_SIGN_UP=false
ENV GF_ANALYTICS_REPORTING_ENABLED=false
ENV GF_ANALYTICS_CHECK_FOR_UPDATES=false
ENV GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES=false

# Puertos
EXPOSE 3000

# Cambiar al usuario grafana
USER grafana

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Metadatos de la imagen
LABEL org.opencontainers.image.title="Sponzo Dashboard" \
      org.opencontainers.image.description="White-label Grafana customized for Sponzo" \
      org.opencontainers.image.vendor="partnia.tech" \
      org.opencontainers.image.url="https://github.com/partnia-tech/sponzo_grafana_whitelabel" \
      org.opencontainers.image.source="https://github.com/partnia-tech/sponzo_grafana_whitelabel" \
      org.opencontainers.image.licenses="AGPL-3.0"

# Comando por defecto
CMD ["/usr/share/grafana/bin/grafana-server", \
     "--config=/etc/grafana/grafana.ini", \
     "--pidfile=/var/run/grafana-server.pid", \
     "--packaging=docker", \
     "cfg:default.log.mode=console", \
     "cfg:default.paths.data=/var/lib/grafana", \
     "cfg:default.paths.logs=/var/log/grafana", \
     "cfg:default.paths.plugins=/var/lib/grafana/plugins", \
     "cfg:default.paths.provisioning=/etc/grafana/provisioning"]
